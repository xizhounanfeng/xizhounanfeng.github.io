(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{337:function(t,a,s){"use strict";s.r(a);var _=s(0),v=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"索引介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引介绍"}},[t._v("#")]),t._v(" 索引介绍")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("点睛")]),t._v(" "),a("p",[a("strong",[t._v("索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构")])])]),t._v(" "),a("ul",[a("li",[t._v("索引的作用就相当于书的目录\n"),a("ul",[a("li",[t._v("举例：\n"),a("ul",[a("li",[t._v("在查字典的时候，如果没有目录，就只能一页一页的去找需要查的那个字，速度很慢")]),t._v(" "),a("li",[t._v("如果有目录，只需要先去目录里查找字的位置，然后直接翻到那一页")])])])])]),t._v(" "),a("li",[t._v("索引底层数据结构存在很多种类型，常见的索引结构有: B 树， B+树 和 Hash、红黑树\n"),a("ul",[a("li",[t._v("在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 B+树作为索引结构【二者实现方式不同】")])])])]),t._v(" "),a("h2",{attrs:{id:"索引的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的优缺点"}},[t._v("#")]),t._v(" 索引的优缺点")]),t._v(" "),a("ul",[a("li",[t._v("优点\n"),a("ul",[a("li",[t._v("使用索引可以大大加快数据的检索速度（大大减少检索的数据量）【创建索引的主要原因】")]),t._v(" "),a("li",[t._v("通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性")])])]),t._v(" "),a("li",[t._v("缺点\n"),a("ul",[a("li",[t._v("创建索引和维护索引需要耗费时间\n"),a("ul",[a("li",[t._v("当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会"),a("code",[t._v("降低 SQL 执行效率")])])])]),t._v(" "),a("li",[t._v("索引需要使用物理文件存储，也会耗费一定空间")])])]),t._v(" "),a("li",[a("strong",[t._v("使用索引一定能提高查询效率吗？")]),t._v(" "),a("ul",[a("li",[t._v("一般情况：索引查询都比全表扫描要快")]),t._v(" "),a("li",[t._v("个别情况：如果数据库的数据量不大的话，那么使用索引不一定能带来很大提升")])])])]),t._v(" "),a("h2",{attrs:{id:"索引类型总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引类型总结"}},[t._v("#")]),t._v(" 索引类型总结")]),t._v(" "),a("h3",{attrs:{id:"_01-数据结构维度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-数据结构维度"}},[t._v("#")]),t._v(" 01. 数据结构维度：")]),t._v(" "),a("ul",[a("li",[t._v("B+Tree 索引：\n"),a("ul",[a("li",[t._v("MySQL默认和最常用的索引类型")]),t._v(" "),a("li",[t._v("只有叶子节点存储value，非叶子节点只有指针和key")]),t._v(" "),a("li",[t._v("存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不同")])])]),t._v(" "),a("li",[t._v("哈希索引：类似键值对的形式，一次即可定位")]),t._v(" "),a("li",[t._v("RTree 索引：\n"),a("ul",[a("li",[t._v("一般不会使用，仅支持 geometry 数据类型")]),t._v(" "),a("li",[t._v("优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替")])])]),t._v(" "),a("li",[t._v("全文索引：\n"),a("ul",[a("li",[t._v("对文本的内容进行分词，进行搜索")]),t._v(" "),a("li",[t._v("目前只有 "),a("code",[t._v("CHAR")]),t._v("、"),a("code",[t._v("VARCHAR")]),t._v(" ，"),a("code",[t._v("TEXT")]),t._v(" 列上可以创建全文索引")]),t._v(" "),a("li",[t._v("一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替")])])])]),t._v(" "),a("h3",{attrs:{id:"_02-底层存储方式维度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-底层存储方式维度"}},[t._v("#")]),t._v(" 02. 底层存储方式维度")]),t._v(" "),a("ul",[a("li",[t._v("聚簇索引（聚集索引）："),a("code",[t._v("索引结构和数据一起存放")]),t._v("的索引\n"),a("ul",[a("li",[t._v("InnoDB 中的主键索引就属于聚簇索引")])])]),t._v(" "),a("li",[t._v("非聚簇索引（非聚集索引）："),a("code",[t._v("索引结构和数据分开存放")]),t._v("的索引\n"),a("ul",[a("li",[t._v("二级索引(辅助索引)就属于非聚簇索引")]),t._v(" "),a("li",[t._v("MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引")])])])]),t._v(" "),a("h3",{attrs:{id:"_03-应用维度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-应用维度"}},[t._v("#")]),t._v(" 03. 应用维度")]),t._v(" "),a("ul",[a("li",[t._v("主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个")]),t._v(" "),a("li",[t._v("普通索引：仅加速查询")]),t._v(" "),a("li",[t._v("唯一索引：加速查询 + 列值唯一（可以有 NULL）")]),t._v(" "),a("li",[t._v("覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值")]),t._v(" "),a("li",[t._v("联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并")]),t._v(" "),a("li",[t._v("全文索引：对文本的内容进行分词，进行搜索")])]),t._v(" "),a("h2",{attrs:{id:"主键索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主键索引"}},[t._v("#")]),t._v(" 主键索引")]),t._v(" "),a("ul",[a("li",[t._v("数据表的"),a("code",[t._v("主键列")]),t._v("使用的就是"),a("code",[t._v("主键索引")])]),t._v(" "),a("li",[t._v("一张数据表有只能有一个主键，并且主键不能为 null，不能重复")]),t._v(" "),a("li",[t._v("InnoDB 引擎的表，当没有显示的指定表的主键时，进行如下操作：\n"),a("ul",[a("li",[t._v("自动先检查表中是否有唯一索引且不允许存在 null 值的字段\n"),a("ul",[a("li",[t._v("存在 --\x3e 则选择该字段为默认的主键")]),t._v(" "),a("li",[t._v("不存在 --\x3e InnoDB 将会自动创建一个 6Byte 的自增主键")])])])])]),t._v(" "),a("li",[t._v("主键索引数据结构【B+Tree索引】如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/cluster-index.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"二级索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二级索引"}},[t._v("#")]),t._v(" 二级索引")]),t._v(" "),a("ul",[a("li",[t._v("二级索引（Secondary Index）的叶子节点存储的数据是主键的值\n"),a("ul",[a("li",[t._v("通过二级索引可以定位主键的位置，二级索引又称为"),a("code",[t._v("辅助索引/非主键索引")])])])]),t._v(" "),a("li",[a("code",[t._v("唯一索引")]),t._v("、"),a("code",[t._v("普通索引")]),t._v("、"),a("code",[t._v("前缀索引")]),t._v("等索引均属于二级索引")]),t._v(" "),a("li",[t._v("二级索引数据结构如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/no-cluster-index.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"前缀索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前缀索引"}},[t._v("#")]),t._v(" 前缀索引")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("定义：选择索引列的最左n个字符来建立索引")])]),t._v(" "),a("li",[a("p",[t._v("语法："),a("code",[t._v("CREATE INDEX idx_table_xxx ON table(xxx(3));")])])]),t._v(" "),a("li",[a("p",[t._v("创建前缀索引的"),a("code",[t._v("关键")]),t._v("："),a("strong",[t._v("选择足够长的前缀以保证较高的索引选择性")])]),t._v(" "),a("ul",[a("li",[t._v("索引选择性越高查询效率就越高，因为选择性高的索引可以让MySQL在查找时过滤掉更多的数据行")])])]),t._v(" "),a("li",[a("p",[t._v("应用场景：需要在很长的字符列（如BLOB、TEXT或很长的VARCHAR类型的列）上创建索引，这会造成索引特别大且慢")])]),t._v(" "),a("li",[a("p",[t._v("解决方案：为了避免产生大且慢的索引，一种策略是使用哈希索引，另一种策略就是使用前缀索引")])]),t._v(" "),a("li",[a("p",[t._v("优缺点：")]),t._v(" "),a("ul",[a("li",[t._v("优点：选择索引列的最左n个字符来建立索引，大大节约了索引空间，进而提高索引效率")]),t._v(" "),a("li",[t._v("缺点：MySQL无法使用前缀索引做ORDER BY 、GROUP BY 和覆盖扫描")])])])]),t._v(" "),a("Badge",{attrs:{text:"示例",vertical:"middle"}}),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNSIGNED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'主键'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'姓名'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TINYINT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'性别，0-男，1-女'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TINYINT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'年龄'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'邮箱'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("homepage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'主页'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("add_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'添加时间'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("update_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'修改时间'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNODB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// email列创建前缀索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" idx_author_email "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h2",{attrs:{id:"聚簇索引与非聚簇索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引与非聚簇索引"}},[t._v("#")]),t._v(" 聚簇索引与非聚簇索引")]),t._v(" "),a("h3",{attrs:{id:"_01-聚簇索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-聚簇索引"}},[t._v("#")]),t._v(" 01. 聚簇索引")]),t._v(" "),a("ul",[a("li",[t._v("介绍：\n"),a("ul",[a("li",[t._v("聚簇索引（Clustered Index）即"),a("code",[t._v("索引结构和数据一起存放")]),t._v("的索引，并不是一种单独的索引类型\n"),a("ul",[a("li",[t._v("InnoDB 中的主键索引属于聚簇索引")])])]),t._v(" "),a("li",[t._v("InnoDB 引擎的表的 "),a("code",[t._v(".ibd")]),t._v("文件包含该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据")])])]),t._v(" "),a("li",[t._v("优缺点\n"),a("ul",[a("li",[t._v("优点：\n"),a("ul",[a("li",[a("strong",[t._v("查询速度非常快")]),t._v("：\n"),a("ul",[a("li",[t._v("整个 B+树本身就是一颗多叉平衡树，叶子节点都是有序的，定位到索引的节点，就相当于定位到数据")]),t._v(" "),a("li",[t._v("相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作 【即回表】")])])]),t._v(" "),a("li",[a("strong",[t._v("对排序查找和范围查找优化")]),t._v("：聚簇索引对于主键的排序查找和范围查找速度非常快")])])]),t._v(" "),a("li",[t._v("缺点：\n"),a("ul",[a("li",[a("strong",[t._v("依赖于有序的数据")]),t._v("：\n"),a("ul",[a("li",[t._v("B+树是多路平衡树，若索引的数据不是有序的，则需要在插入时排序")]),t._v(" "),a("li",[t._v("如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢")])])]),t._v(" "),a("li",[a("strong",[t._v("更新代价大")]),t._v("：如果索引列的数据被修改，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于"),a("code",[t._v("主键索引")]),t._v("来说，"),a("code",[t._v("主键")]),t._v("一般都是"),a("code",[t._v("不可被修改")]),t._v("的")])])])])])]),t._v(" "),a("h3",{attrs:{id:"_02-非聚簇索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-非聚簇索引"}},[t._v("#")]),t._v(" 02. 非聚簇索引")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("介绍：")]),t._v(" "),a("ul",[a("li",[t._v("非聚簇索引(Non-Clustered Index)即"),a("code",[t._v("索引结构和数据分开存放")]),t._v("的索引，并不是一种单独的索引类型\n"),a("ul",[a("li",[t._v("二级索引(辅助索引)就属于非聚簇索引")]),t._v(" "),a("li",[t._v("MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引")])])]),t._v(" "),a("li",[t._v("非聚簇索引的叶子节点并不一定存放数据的指针\n"),a("ul",[a("li",[t._v("因为二级索引的叶子节点就存放的是主键，根据主键再"),a("code",[t._v("回表")]),t._v("查寻数据")])])])])]),t._v(" "),a("li",[a("p",[t._v("优缺点：")]),t._v(" "),a("ul",[a("li",[t._v("优点：\n"),a("ul",[a("li",[t._v("更新代价比聚簇索引要小。非聚簇索引的叶子节点是不存放数据的")])])]),t._v(" "),a("li",[t._v("缺点：\n"),a("ul",[a("li",[a("strong",[t._v("依赖于有序的数据")]),t._v("：与聚簇索引一样，非聚簇索引也依赖于有序的数据")]),t._v(" "),a("li",[a("strong",[t._v("可能会二次查询(回表)")]),t._v(":非聚簇索引最大的缺点。当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("非聚簇索引一定会回表查询【覆盖索引】吗")])]),t._v(" "),a("ul",[a("li",[t._v("不一定")]),t._v(" "),a("li",[t._v("示例一：用户准备使用 SQL 查询用户名，而用户名字段正好建立了索引")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xizhounanfeng'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("该索引的 key 本身就是 name，查到对应的 name 直接返回，无需回表查询")])])]),t._v(" "),a("h2",{attrs:{id:"覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[t._v("#")]),t._v(" 覆盖索引")]),t._v(" "),a("ul",[a("li",[t._v("定义："),a("code",[t._v("一个索引包含（或者说覆盖）所有需要查询的字段的值")])])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("回表操作")]),t._v(" "),a("p",[t._v("在 InnoDB 存储引擎中，非主键索引的叶子节点包含的是主键的值。这意味着，当使用非主键索引进行查询时，数据库会"),a("code",[t._v("先找到对应的主键值")]),t._v("，然后再"),a("code",[t._v("通过主键索引来定位和检索完整的行数据")])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据，而无需回表查询")])])]),t._v(" "),a("h2",{attrs:{id:"联合索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合索引"}},[t._v("#")]),t._v(" 联合索引")]),t._v(" "),a("ul",[a("li",[t._v("定义：使用表中的多个字段创建索引，又称"),a("code",[t._v("组合索引")]),t._v("或"),a("code",[t._v("复合索引")])])]),t._v(" "),a("h2",{attrs:{id:"最左前缀匹配原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀匹配原则"}},[t._v("#")]),t._v(" 最左前缀匹配原则")]),t._v(" "),a("ul",[a("li",[t._v("定义：在使用联合索引时，MySQL 会根据索引中的字段顺序，从左到右依次匹配查询条件中的字段。如果查询条件与索引中的最左侧字段相匹配，那么 MySQL 就会使用索引来过滤数据，这样可以提高查询效率")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("原则")]),t._v(" "),a("p",[t._v("最左匹配原则会一直向右匹配，直到遇到"),a("code",[t._v("范围查询（如 >、<）为止")]),t._v("。对于 "),a("code",[t._v(">=、<=、BETWEEN 以及前缀匹配 LIKE 的范围查询，不会停止匹配")])])]),t._v(" "),a("h2",{attrs:{id:"b-tree-索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-tree-索引"}},[t._v("#")]),t._v(" B+Tree 索引")]),t._v(" "),a("ul",[a("li",[t._v("MySQL 的 InnoDB 存储引擎会为每一张数据库表创建一个「聚簇索引」来保存表的数据【即主键索引】\n"),a("ul",[a("li",[t._v("聚簇索引默认使用的是 "),a("strong",[t._v("B+Tree 索引")])])])])]),t._v(" "),a("p",[a("strong",[t._v("示例【用于说明B+Tree 索引在存储数据中的具体实现】")])]),t._v(" "),a("ul",[a("li",[t._v("商品表如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/produce.jpg",alt:""}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("主键索引")]),t._v(" "),a("p",[t._v("B+Tree 是一种多叉树，叶子节点存放数据，非叶子节点只存放索引，而且每个节点里的数据是"),a("strong",[t._v("按主键值（id）顺序存放")]),t._v("的，每一层父节点的索引值都会出现在下层子节点的索引值中，因此在叶子节点中，包括了所有的索引值信息，并且每一个叶子节点都指向下一个叶子节点，形成一个链表，便于范围查询")])]),t._v(" "),a("ul",[a("li",[t._v("聚簇索引的 B+Tree 如图所示：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/b+tree-01.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_01-索引查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-索引查询"}},[t._v("#")]),t._v(" 01. 索引查询")]),t._v(" "),a("ul",[a("li",[t._v("执行"),a("code",[t._v("select * from t_product where id = 5")]),t._v("查询语句\n"),a("ul",[a("li",[t._v("因为B+Tree 是一个"),a("strong",[t._v("有序")]),t._v("的数据结构，所以可以通过二分查找算法快速定位到这条记录")])])]),t._v(" "),a("li",[t._v("具体过程：\n"),a("ul",[a("li",[t._v("从根节点开始，将 5 与根节点的索引数据 (1，10，20) 比较，5 在 1 和 10 之间，根据二分查找算法，找到第二层的索引数据 (1，4，7)")]),t._v(" "),a("li",[t._v("在第二层的索引数据 (1，4，7)中进行查找，因为 5 在 4 和 7 之间，根据二分查找算法，找到第三层的索引数据（4，5，6）")]),t._v(" "),a("li",[t._v("在叶子节点的索引数据（4，5，6）中进行查找，然后我们找到了索引值为 5 的这条记录")])])])]),t._v(" "),a("h3",{attrs:{id:"_02-二级索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-二级索引"}},[t._v("#")]),t._v(" 02. 二级索引")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("聚簇索引")]),t._v("只能用于"),a("code",[t._v("主键字段")]),t._v("的快速查询")]),t._v(" "),a("li",[t._v("若想实现"),a("code",[t._v("「非主键字段」")]),t._v("的快速查询，我们就要针对「非主键字段」创建索引，即二级索引\n"),a("ul",[a("li",[a("code",[t._v("二级索引的叶子节点存放的是主键值，不是实际数据")])])])])]),t._v(" "),a("p",[t._v("将商品表中的 product_no （商品编码）字段设置为二级索引，那么二级索引的 B+Tree 如下图【其中非叶子的索引值是 product_no（图中橙色部分），叶子节点存储的数据是主键值（图中绿色部分）】：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/b+tree-02.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("执行"),a("code",[t._v("select * from product where product_no = '0002';")]),t._v("查询语句")])]),t._v(" "),a("li",[a("p",[t._v("执行过程：")]),t._v(" "),a("ul",[a("li",[t._v("在二级索引的 B+Tree 中快速查找到 product_no 为 0002 的二级索引记录，然后获取主键值")]),t._v(" "),a("li",[t._v("利用主键值在主键索引的 B+Tree 中快速查询到对应的叶子节点，然后获取完整的记录")])])]),t._v(" "),a("li",[a("p",[t._v("上述执行过程是"),a("code",[t._v("回表")]),t._v("，即要查两个 B+Tree 才能查到数据，如下图：")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/b+tree-03.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_03-覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-覆盖索引"}},[t._v("#")]),t._v(" 03. 覆盖索引")]),t._v(" "),a("ul",[a("li",[t._v("当查询的数据是能在二级索引的 B+Tree 的叶子节点里查询到，这时就不用再查主键索引\n"),a("ul",[a("li",[t._v("比如执行"),a("code",[t._v("select id from product where product_no = '0002';")]),t._v("查询语句")])])]),t._v(" "),a("li",[t._v("在二级索引的 B+Tree 就能查询到结果的过程就叫作「"),a("strong",[t._v("覆盖索引")]),t._v("」，即只需要查一个 B+Tree 就能找到数据")])]),t._v(" "),a("h3",{attrs:{id:"_04-联合索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_04-联合索引"}},[t._v("#")]),t._v(" 04. 联合索引")]),t._v(" "),a("ul",[a("li",[t._v("以商品表为例，product_no 和 name 字段组合成联合索引\n"),a("ul",[a("li",[t._v("执行"),a("code",[t._v("CREATE INDEX index_product_no_name ON product(product_no, name);")]),t._v("创建联合索引")])])]),t._v(" "),a("li",[t._v("联合索引 ``(product_no, name)` 的 B+Tree 示意图如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/b+tree-04.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("从上图联合索引的非叶子节点用两个字段的值作为 B+Tree 的索引值")])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("重要点")]),t._v(" "),a("p",[t._v("联合索引的 B+Tree 是先按 "),a("code",[t._v("product_no")]),t._v(" 进行排序，然后再 "),a("code",[t._v("product_no")]),t._v(" 相同的情况再按 "),a("code",[t._v("name")]),t._v(" 字段排序")])]),t._v(" "),a("h3",{attrs:{id:"_05-最左前缀匹配原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_05-最左前缀匹配原则"}},[t._v("#")]),t._v(" 05. 最左前缀匹配原则")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在使用联合索引进行查询的时候，如果不遵循「最左匹配原则」，联合索引会失效，这样就无法利用到索引快速查询的特性")])]),t._v(" "),a("li",[a("Badge",{attrs:{text:"示例1",vertical:"middle"}}),t._v("：创建联合索引(a, b, c) \n"),a("ul",[a("li",[a("p",[t._v("联合索引生效：查询优化器的存在，使得 a 字段在 where 子句的顺序并不重要")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("where a=1")])]),t._v(" "),a("li",[a("code",[t._v("where a=1 and b=2 and c=3")])]),t._v(" "),a("li",[a("code",[t._v("where a=1 and b=2")])])])]),t._v(" "),a("li",[a("p",[t._v("联合索引失效：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("where b=2")])]),t._v(" "),a("li",[a("code",[t._v("where c=3")])]),t._v(" "),a("li",[a("code",[t._v("where b=2 and c=3")])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("失效原因")]),t._v(" "),a("p",[t._v("因为(a, b, c) 联合索引，是先按 a 排序，在 a 相同的情况再按 b 排序，在 b 相同的情况再按 c 排序。所以，"),a("code",[t._v("b 和 c 是全局无序，局部相对有序的")]),t._v("，这样在没有遵循最左匹配原则的情况下，是无法利用到索引的")])])])])],1),t._v(" "),a("li",[a("Badge",{attrs:{text:"示例2",vertical:"middle"}}),t._v("：创建联合索引（a，b）-- 加深理解联合索引生效和失效\n"),a("ul",[a("li",[t._v("该联合索引的 B+ Tree 如下：")])])],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/b+tree-05.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("从上图可以看到：\n"),a("ul",[a("li",[t._v("a 是全局有序的（1, 2, 2, 3, 4, 5, 6, 7 ,8），b 是全局是无序的（12，7，8，2，3，8，10，5，2）\n"),a("ul",[a("li",[t._v("直接执行 "),a("code",[t._v("where b = 2")]),t._v(" 这种查询条件是没有办法利用联合索引的，"),a("strong",[t._v("利用索引的前提是索引里的 key 是有序的")])])])]),t._v(" "),a("li",[t._v("只有在 a 相同的情况下，b 才是有序的\n"),a("ul",[a("li",[t._v("比如 a = 2 的时候，b 的值为（7，8），这时就是有序的，这个有序状态是局部的")]),t._v(" "),a("li",[t._v("执行 "),a("code",[t._v("where a = 2 and b = 7")]),t._v(" 这种查询条件时， a 和 b 字段能用到联合索引的，即联合索引生效")])])])])])]),t._v(" "),a("h3",{attrs:{id:"_06-联合索引范围查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_06-联合索引范围查询"}},[t._v("#")]),t._v(" 06. 联合索引范围查询")]),t._v(" "),a("ul",[a("li",[t._v("联合索引存在一种特殊情况：部分字段用到联合索引的 B+Tree，部分字段没有用到联合索引的 B+Tree")]),t._v(" "),a("li",[t._v("范围查询时，会出现上面的特殊情况：\n"),a("ul",[a("li",[a("strong",[t._v("联合索引的最左匹配原则会一直向右匹配直到遇到「范围查询」就会停止匹配")])]),t._v(" "),a("li",[t._v("即"),a("code",[t._v("范围查询的字段可以用到联合索引，但是范围查询字段的后面的字段无法用到联合索引")])])])])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("结论")]),t._v(" "),a("p",[a("strong",[t._v("联合索引的最左匹配原则，在遇到范围查询（如 >、<）的时候，就会停止匹配，即范围查询的字段可以用到联合索引，但是在范围查询字段后面的字段无法用到联合索引。注意，对于 >=、<=、BETWEEN、LIKE前缀匹配的范围查询，并不会停止匹配")])])]),t._v(" "),a("p",[t._v("证明如下示例：")]),t._v(" "),a("tabs",[a("tab",{attrs:{name:"示例1"}},[a("Badge",{attrs:{text:"范围查询 >、<",vertical:"middle"}}),t._v(" "),a("p",[t._v("======")]),t._v(" "),a("p",[a("strong",[a("mark",[t._v("Q1")]),t._v("："),a("code",[t._v("select * from t_table where a > 1 and b = 2")]),t._v(" --\x3e 联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？")])]),t._v(" "),a("p",[t._v("======")]),t._v(" "),a("ul",[a("li",[t._v("a 字段可以在联合索引的 B+Tree 中进行索引查询\n"),a("ul",[a("li",[t._v("由于联合索引（二级索引）是先按照 a 字段的值排序的，所以符合 a > 1 条件的二级索引记录肯定是相邻的")]),t._v(" "),a("li",[t._v("在进行索引扫描的时候，可以定位到符合 a > 1 条件的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录不符合 a > 1 条件位置")])])]),t._v(" "),a("li",[t._v("b 字段不可以在联合索引的 B+Tree 中进行索引查询\n"),a("ul",[a("li",[t._v("在符合 a > 1 条件的二级索引记录的范围里，b 字段的值是无序的")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/b+tree-06.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("下面这三条记录的 a 字段的值都符合 a > 1 查询条件，而 b 字段的值是无序的：\n"),a("ul",[a("li",[t._v("a 字段值为 5 的记录，该记录的 b 字段值为 8")]),t._v(" "),a("li",[t._v("a 字段值为 6 的记录，该记录的 b 字段值为 10")]),t._v(" "),a("li",[t._v("a 字段值为 7 的记录，该记录的 b 字段值为 5")])])]),t._v(" "),a("li",[t._v("因此，我们不能根据查询条件 b = 2 来进一步减少需要扫描的记录数量，即 b 字段无法利用联合索引进行索引查询")]),t._v(" "),a("li",[t._v("总结："),a("strong",[t._v("Q1 查询语句只有 a 字段用到了联合索引进行索引查询，而 b 字段并没有使用到联合索引")])])]),t._v(" "),a("p",[t._v("============================ 分割线 ============================")]),t._v(" "),a("ul",[a("li",[t._v("此外，还可采取"),a("code",[t._v("EXPLAIN执行计划")]),t._v("了解到这一点\n"),a("ul",[a("li",[t._v("在使用联合索引进行查询的时候，"),a("strong",[t._v("通过 key_len 我们可以知道优化器具体使用了多少个字段的查询条件来形成扫描区间的边界条件")])])])]),t._v(" "),a("li",[t._v("若 a 和 b 都是 int 类型且不为 NULL 的字段，那么 Q1 查询语句执行计划如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/b+tree-07.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("分析：\n"),a("ul",[a("li",[t._v("key_len 为 4 字节（"),a("em",[t._v("如果字段允许为 NULL，就在字段类型占用的字节数上加 1，也就是 5 字节")]),t._v("），说明只有 a 字段用到了联合索引进行索引查询")]),t._v(" "),a("li",[t._v("即使 b 字段没用到联合索引，key 为 idx_a_b，也说明 Q1 查询语句使用了 idx_a_b 联合索引")])])]),t._v(" "),a("li",[t._v("结论："),a("strong",[t._v("a 字段使用了 > 进行范围查询，联合索引的最左匹配原则在遇到 a 字段的范围查询（ >）后就停止匹配了，因此 b 字段并没有使用到联合索引")])])])],1),t._v(" "),a("tab",{attrs:{name:"示例2"}},[a("Badge",{attrs:{text:"范围查询 >=、<=",vertical:"middle"}}),t._v(" "),a("p",[t._v("======")]),t._v(" "),a("p",[a("strong",[a("mark",[t._v("Q2")]),t._v(":"),a("code",[t._v("select * from t_table where a >= 1 and b = 2")]),t._v(" --\x3e 联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？")])]),t._v(" "),a("p",[t._v("======")]),t._v(" "),a("ul",[a("li",[t._v("a 字段可以在联合索引的 B+Tree 中进行索引查询\n"),a("ul",[a("li",[t._v("联合索引（二级索引）是先按照 a 字段的值排序的，所以符合 a >= 1 条件的二级索引记录肯定是相邻")]),t._v(" "),a("li",[t._v("在进行索引扫描的时候，可以定位到符合 a >= 1 条件的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录不符合 a >= 1 条件位置")])])]),t._v(" "),a("li",[t._v("b 字段可以在联合索引的 B+Tree 中进行索引查询\n"),a("ul",[a("li",[t._v("虽然在符合 a >= 1 条件的二级索引记录的范围里，b 字段的值是「无序」的，"),a("strong",[t._v("但是对于符合 a = 1 的二级索引记录的范围里，b 字段的值是「有序」的")]),t._v("（因为对于联合索引，是先按照 a 字段的值排序，然后在 a 字段的值相同的情况下，再按照 b 字段的值进行排序）")]),t._v(" "),a("li",[t._v("在确定需要扫描的二级索引的范围时，当二级索引记录的 a = 1 时，可以通过 b = 2 条件减少需要扫描的二级索引记录范围，即 b 字段可以利用联合索引进行索引查询。从符合 a = 1 and b = 2 条件的第一条记录开始扫描，而不需要从第一个 a 字段值为 1 的记录开始扫描")])])]),t._v(" "),a("li",[t._v("总结："),a("strong",[t._v("Q2 查询语句 a 和 b 字段都用到了联合索引进行索引查询")])])]),t._v(" "),a("p",[t._v("============================ 分割线 ============================")]),t._v(" "),a("ul",[a("li",[t._v("若 a 和 b 都是 int 类型且不为 NULL 的字段，那么 Q2 查询语句执行计划如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/images/mysql/b+tree-08.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("分析：key_len 为 8 字节，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，即 a 和 b 字段都用到了联合索引进行索引查询")]),t._v(" "),a("li",[t._v("结论："),a("strong",[t._v("虽然 a 字段使用了 >= 进行范围查询，但是联合索引的最左匹配原则并没有在遇到 a 字段的范围查询（ >=）后就停止匹配了，b 字段还是可以用到了联合索引的")])])])],1),t._v(" "),a("tab",{attrs:{name:"示例3"}},[a("Badge",{attrs:{text:"范围查询 BETWEEN",vertical:"middle"}}),t._v(" "),a("p",[t._v("======")]),t._v(" "),a("p",[a("strong",[a("mark",[t._v("Q3")]),t._v(": "),a("code",[t._v("SELECT * FROM t_table WHERE a BETWEEN 2 AND 8 AND b = 2")]),t._v(" --\x3e 联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？")])]),t._v(" "),a("p",[t._v("======")]),t._v(" "),a("ul",[a("li",[t._v("Q3查询语句类似于Q2查询语句，故"),a("strong",[t._v("Q3 查询语句 a 和 b 字段都用到了联合索引进行索引查询")]),t._v(" "),a("ul",[a("li",[t._v("在MySQL 中，BETWEEN 包含了 value1 和 value2 边界值，类似于 >= and <=")])])]),t._v(" "),a("li",[t._v("若 a 和 b 都是 int 类型且不为 NULL 的字段，那么 Q2 查询语句执行计划如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/b+tree-09.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("分析：key_len 为 8 字节，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，即 a 和 b 字段都用到了联合索引进行索引查询")]),t._v(" "),a("li",[t._v("总结："),a("strong",[t._v("虽然 a 字段使用了 BETWEEN 进行范围查询，但是联合索引的最左匹配原则并没有在遇到 a 字段的范围查询（ BETWEEN）后就停止匹配，b 字段还是可以用到联合索引的")])])])],1),t._v(" "),a("tab",{attrs:{name:"示例4"}},[a("Badge",{attrs:{text:"范围查询 LIKE",vertical:"middle"}}),t._v(" "),a("p",[t._v("======")]),t._v(" "),a("p",[a("strong",[a("mark",[t._v("Q4")]),t._v(": "),a("code",[t._v("SELECT * FROM t_user WHERE name like 'j%' and age = 22")]),t._v(" --\x3e 联合索引（name, age）哪一个字段用到了联合索引的 B+Tree？")])]),t._v(" "),a("p",[t._v("======")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/b+tree-10.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("name 字段可以在联合索引的 B+Tree 中进行索引查询，形成的扫描区间是['j','k')\n"),a("ul",[a("li",[t._v("由于联合索引（二级索引）是先按照 name 字段的值排序的，所以前缀为 ‘j’ 的 name 字段的二级索引记录都是相邻的")]),t._v(" "),a("li",[t._v("在进行索引扫描的时候，可以定位到符合前缀为 ‘j’ 的 name 字段的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录的 name 前缀不为 ‘j’ 为止")])])]),t._v(" "),a("li",[t._v("age 字段可以在联合索引的 B+Tree 中进行索引查询\n"),a("ul",[a("li",[t._v("虽然在符合前缀为 ‘j’ 的 name 字段的二级索引记录的范围里，age 字段的值是「无序」的，"),a("strong",[t._v("但是对于符合 "),a("code",[t._v("name = j")]),t._v(" 的二级索引记录的范围里，age字段的值是「有序」的")]),t._v("（因为对于联合索引，是先按照 name 字段的值排序，然后在 name 字段的值相同的情况下，再按照 age 字段的值进行排序）")]),t._v(" "),a("li",[t._v("在确定需要扫描的二级索引的范围时，当二级索引记录的 name 字段值为 ‘j’ 时，可以通过 "),a("code",[t._v("age = 22")]),t._v(" 条件减少需要扫描的二级索引记录范围，即age 字段可以利用联合索引进行索引查询。也就是说，从符合 "),a("code",[t._v("name = 'j' and age = 22")]),t._v(" 条件的第一条记录时开始扫描，而不需要从第一个 name 为 j 的记录开始扫描")]),t._v(" "),a("li",[t._v("扫描过程如下：")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/b+tree-11.jpg",alt:""}})]),t._v(" "),a("p",[t._v("============================ 分割线 ============================")]),t._v(" "),a("ul",[a("li",[t._v("本次例子：\n"),a("ul",[a("li",[t._v("name 字段\n"),a("ul",[a("li",[t._v("类型是 varchar(30) 且不为 NULL")]),t._v(" "),a("li",[t._v("数据库表使用了 utf8mb4 字符集，一个字符集为 utf8mb4 的字符是 4 个字节，因此 name 字段的实际数据最多占用的存储空间长度是 120 字节（30 x 4）")]),t._v(" "),a("li",[t._v("是变长类型的字段，需要再加 2，即 name 的 key_len 为 122")])])]),t._v(" "),a("li",[t._v("age 字段的类型是 int 且不为 NULL，key_len 为 4")])])]),t._v(" "),a("li",[t._v("Q4 查询语句的执行计划如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jsd.onmicrosoft.cn/gh/xizhounanfeng/blogImg/b+tree-12.jpg",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("分析：key_len 为 126 字节，name 的 key_len 为 122，age 的 key_len 为 4，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，即 name 和 age 字段都用到了联合索引进行索引查询")]),t._v(" "),a("li",[t._v("总结："),a("strong",[t._v("虽然 name 字段使用了 like 前缀匹配进行范围查询，但是联合索引的最左匹配原则并没有在遇到 name 字段的范围查询（ like 'j%'）后就停止匹配，age 字段还是可以用到联合索引的")])])])],1)],1),t._v(" "),a("h2",{attrs:{id:"😁正确使用索引一些建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#😁正确使用索引一些建议"}},[t._v("#")]),t._v(" 😁正确使用索引一些建议")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("选择合适字段创建索引")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("不为 NULL 的字段")]),t._v("：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代")]),t._v(" "),a("li",[a("strong",[t._v("被频繁查询的字段")]),t._v("：创建索引的字段应该是查询操作非常频繁的字段")]),t._v(" "),a("li",[a("strong",[t._v("被作为条件查询的字段")]),t._v("：被作为 WHERE 条件查询的字段，应该被考虑建立索引")]),t._v(" "),a("li",[a("strong",[t._v("频繁需要排序的字段")]),t._v("：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间")]),t._v(" "),a("li",[a("strong",[t._v("被经常频繁用于连接的字段")]),t._v("：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率")])])]),t._v(" "),a("li",[a("p",[t._v("被频繁更新的字段应该慎重建立索引")]),t._v(" "),a("ul",[a("li",[t._v("虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引")])])]),t._v(" "),a("li",[a("p",[t._v("限制每张表的索引数量")]),t._v(" "),a("ul",[a("li",[t._v("建议单张表索引不超过 5 个")]),t._v(" "),a("li",[t._v("索引可以"),a("code",[t._v("增加查询效率")]),t._v("，但同样也会"),a("code",[t._v("降低插入和更新的效率")]),t._v("，甚至有些情况下会降低查询效率\n"),a("ul",[a("li",[t._v("因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划。如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能")])])])])]),t._v(" "),a("li",[a("p",[t._v("尽可能考虑建立联合索引而非单列索引")]),t._v(" "),a("ul",[a("li",[t._v("索引是需要占用磁盘空间的。可以简单理解为每个索引都对应着一颗 B+树")]),t._v(" "),a("li",[t._v("如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的")]),t._v(" "),a("li",[t._v("如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升")])])]),t._v(" "),a("li",[a("p",[t._v("避免冗余索引")]),t._v(" "),a("ul",[a("li",[t._v("冗余索引指的是索引的功能相同，能够命中索引"),a("code",[t._v("a, b")]),t._v("就肯定能命中索引"),a("code",[t._v("a")]),t._v(" ，那么索引"),a("code",[t._v("a")]),t._v("就是冗余索引\n"),a("ul",[a("li",[a("code",[t._v("name,city")]),t._v("和"),a("code",[t._v("name")]),t._v("这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的")])])]),t._v(" "),a("li",[t._v("在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引")])])]),t._v(" "),a("li",[a("p",[t._v("字符串类型的字段使用前缀索引代替普通索引")]),t._v(" "),a("ul",[a("li",[t._v("前缀索引仅限于字符串类型，较普通索引会占用更小的空间")])])]),t._v(" "),a("li",[a("p",[t._v("避免索引失效")]),t._v(" "),a("ul",[a("li",[t._v("待补充：参考"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/mwME3qukHBFul57WQLkOYg",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引失效的场景"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[t._v("删除长期未使用的索引")]),t._v(" "),a("ul",[a("li",[t._v("不用的索引的存在会造成不必要的性能损耗")])])]),t._v(" "),a("li",[a("p",[t._v("知道如何分析SQL语句是否走索引查询")]),t._v(" "),a("ul",[a("li",[t._v("详细介绍参考"),a("RouterLink",{attrs:{to:"/05.数据库/01.MySQL/02.MySQL执行计划分析.html"}},[t._v("MySQL执行计划分析")])],1)])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("参考链接")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://javaguide.cn/database/mysql/mysql-index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引详解 | JavaGuide"),a("OutboundLink")],1),t._v(" 、"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/8qemhRg5MgXs1So5YCv0fQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("全网都在说一个错误的结论"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://blog.csdn.net/u011424653/article/details/80151785",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL前缀索引"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);a.default=v.exports}}]);